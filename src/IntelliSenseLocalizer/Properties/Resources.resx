<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="StringCMDBuildDescription" xml:space="preserve">
    <value>build the localized intellisense file.</value>
  </data>
  <data name="StringCMDBuildOptionContentCompareDescription" xml:space="preserve">
    <value>set the content compare type.</value>
  </data>
  <data name="StringCMDBuildOptionLocaleDescription" xml:space="preserve">
    <value>select locale. eg: "zh-cn". use the system culture info default.</value>
  </data>
  <data name="StringCMDBuildOptionNoCacheDescription" xml:space="preserve">
    <value>set not use existed local page cache.</value>
  </data>
  <data name="StringCMDBuildOptionOutputDescription" xml:space="preserve">
    <value>set the output path.</value>
  </data>
  <data name="StringCMDBuildOptionPackDescription" xml:space="preserve">
    <value>select application pack. eg: "Microsoft.AspNetCore.App". process all pack default..</value>
  </data>
  <data name="StringCMDBuildOptionParallelCountDescription" xml:space="preserve">
    <value>set the parallel process count. large value wiil let MS block your ip fast.</value>
  </data>
  <data name="StringCMDBuildOptionSeparateLineDescription" xml:space="preserve">
    <value>the separate line between origin and locale content. (effective only use bilingual comparison)</value>
  </data>
  <data name="StringCMDBuildOptionVersionDescription" xml:space="preserve">
    <value>select .net version. eg: "6.0.3". process the lastest version default.</value>
  </data>
  <data name="StringCMDClearDescription" xml:space="preserve">
    <value>clear the download or cache files.</value>
  </data>
  <data name="StringCMDInstallDescription" xml:space="preserve">
    <value>install the localized intellisense file. (copy all .xml file from source directory to target SDK pack directory)</value>
  </data>
  <data name="StringCMDInstallOptionLocaleDescription" xml:space="preserve">
    <value>select locale. eg: "zh-cn". copy all default.</value>
  </data>
  <data name="StringCMDInstallOptionSourceDescription" xml:space="preserve">
    <value>set the install source directory.</value>
  </data>
  <data name="StringCMDInstallOptionTargetDescription" xml:space="preserve">
    <value>set the install target sdk directory.</value>
  </data>
  <data name="StringCMDInstallOptionVersionDescription" xml:space="preserve">
    <value>select .net version. eg: "6.0.3". copy all default.</value>
  </data>
  <data name="StringCMDLoadArgumentSourceDescription" xml:space="preserve">
    <value>load archive package source file.</value>
  </data>
  <data name="StringCMDLoadDescription" xml:space="preserve">
    <value>load the localized intellisense file archive package.</value>
  </data>
  <data name="StringCMDLoadGithubDescription" xml:space="preserve">
    <value>load the localized intellisense file archive package from github (if existed).</value>
  </data>
  <data name="StringCMDLoadOptionTargetDescription" xml:space="preserve">
    <value>archive package extract target path.</value>
  </data>
  <data name="StringCMDShowDescription" xml:space="preserve">
    <value>query and show more installed SDK info.</value>
  </data>
  <data name="StringCMDShowOptionPackDescription" xml:space="preserve">
    <value>a regex string for filter application pack name in result.</value>
  </data>
  <data name="StringCMDShowOptionVersionDescription" xml:space="preserve">
    <value>a regex string for filter version in result.</value>
  </data>
  <data name="StringCMDShowPackRefsDescription" xml:space="preserve">
    <value>list all installed SDK‘s pack refs file.</value>
  </data>
  <data name="StringCMDShowPacksDescription" xml:space="preserve">
    <value>list all installed SDK‘s pack.</value>
  </data>
  <data name="StringCMDUnInstallArgumentLocaleDescription" xml:space="preserve">
    <value>select locale. eg: "zh-cn".</value>
  </data>
  <data name="StringCMDUnInstallArgumentMonikerDescription" xml:space="preserve">
    <value>set the framework moniker. eg: "net6.0"</value>
  </data>
  <data name="StringCMDUnInstallDescription" xml:space="preserve">
    <value>uninstall the localized intellisense file.</value>
  </data>
  <data name="StringCMDUnInstallOptionTargetDescription" xml:space="preserve">
    <value>set the uninstall target sdk directory.</value>
  </data>
  <data name="StringOptionFilterDescription" xml:space="preserve">
    <value>a regex string for filter result.</value>
  </data>
  <data name="StringOptionLogLevelDescription" xml:space="preserve">
    <value>set the log level from 0 - 5 .</value>
  </data>
  <data name="StringRootCommandDescription" xml:space="preserve">
    <value>a tool to build and install localize intelliSense file
eg:
show Microsoft.NETCore.App at version 6.0.4 contains 'threading' xml files:
.\islocalizer show refs -p Microsoft.NETCore.App -v 6.0.4 -f threading
build Microsoft.AspNetCore.App at version 6.0.4 's localize intelliSense file:
.\islocalizer build -p Microsoft.AspNetCore.App -v 6.0.4
install the builded files (may need run as administrator):
.\islocalizer install
clear the build caches:
.\islocalizer clear cache</value>
  </data>
</root>